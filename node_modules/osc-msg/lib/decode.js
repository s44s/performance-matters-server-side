"use strict";

var Reader = require("./Reader");
var Tag = require("./Tag");
var utils = require("./utils");

function decode(buffer, opts) {
  opts = opts || {};

  if (!utils.isBlob(buffer)) {
    return { error: new TypeError("invalid Buffer for OSCMessage") };
  }

  var reader = new Reader(buffer);

  if (reader.readString() === "#bundle") {
    return decodeBundle(buffer, opts);
  }

  var msg = decodeMessage(buffer, opts);

  if (opts.bundle) {
    var bundle = { timetag: [0, 0], elements: [msg], oscType: "bundle" };

    if (msg.error) {
      bundle.error = msg.error;
    }

    return bundle;
  }

  return msg;
}

function decodeBundle(buffer, opts) {
  var reader = new Reader(buffer);

  // read '#bundle'
  reader.readString();

  var timetag = reader.readTimeTag();
  var elements = [];
  var oscType = "bundle";

  var error = null;

  while (reader.hasNext()) {
    var length = reader.readUInt32();
    var _buffer = reader.read(length);
    var msg = decode(_buffer, opts);

    if (msg.error) {
      error = msg.error;
    }

    elements.push(msg);

    if (reader.hasError()) {
      error = new RangeError("Offset is outside the bounds of the DataView");
    }

    if (error !== null) {
      break;
    }
  }

  var bundle = { timetag: timetag, elements: elements, oscType: oscType };

  if (error) {
    bundle.error = error;
  }

  return bundle;
}

function decodeMessage(buffer, opts) {
  var reader = new Reader(buffer);
  var address = reader.readAddress();
  var tags = reader.readString();
  var oscType = "message";

  var args = [];
  var error = null;

  if (tags[0] === ",") {
    var stack = [];

    for (var i = 1; i < tags.length; i++) {
      var tag = tags[i];

      switch (tag) {
        case "[":
          stack.push(args);
          args = [];
          break;
        case "]":
          if (stack.length !== 0) {
            var pop = stack.pop();

            if (opts.strip) {
              pop.push(args);
            } else {
              pop.push({ type: "array", value: args });
            }

            args = pop;
          } else {
            error = new TypeError("Unexpected token ']'");
          }
          break;
        default:
          if (Tag.tags.hasOwnProperty(tag)) {
            if (opts.strip) {
              args.push(Tag.tags[tag].read(reader));
            } else {
              args.push({ type: Tag.tags[tag].type, value: Tag.tags[tag].read(reader) });
            }
          } else {
            error = new TypeError("Not supported tag '" + tag + "'");
          }
      }

      if (reader.hasError()) {
        error = new RangeError("Offset is outside the bounds of the DataView");
      }

      if (error !== null) {
        break;
      }
    }

    if (error === null && stack.length !== 0) {
      error = new TypeError("Unexpected token '['");
    }
  } else if (opts.strict) {
    error = new TypeError("Missing OSC Type Tag String");
  }

  var msg = { address: address, args: args, oscType: oscType };

  if (error) {
    msg.error = error;
  }

  return msg;
}

module.exports = decode;