"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DataView2 = require("dataview2").DataView2;
var Buffer2 = require("dataview2").Buffer2;

var Reader = function () {
  function Reader(buffer) {
    _classCallCheck(this, Reader);

    this.view = new DataView2(buffer);

    this._index = 0;
    this._hasError = false;
  }

  _createClass(Reader, [{
    key: "read",
    value: function read(length) {
      length >>>= 0;

      if (this._index + length <= this.view.byteLength) {
        var buffer = new Buffer2(length);
        var view = new DataView2(buffer);

        for (var i = 0; i < length; i++) {
          view.setUint8(i, this.readUInt8());
        }

        return buffer;
      }

      this._index += length;
      this._hasError = true;

      return new Buffer2(0);
    }
  }, {
    key: "readUInt8",
    value: function readUInt8() {
      this._index += 1;

      if (this._index <= this.view.byteLength) {
        return this.view.getUint8(this._index - 1);
      }

      this._hasError = true;

      return 0;
    }
  }, {
    key: "readInt32",
    value: function readInt32() {
      this._index += 4;

      if (this._index <= this.view.byteLength) {
        return this.view.getInt32(this._index - 4);
      }

      this._hasError = true;

      return 0;
    }
  }, {
    key: "readUInt32",
    value: function readUInt32() {
      this._index += 4;

      if (this._index <= this.view.byteLength) {
        return this.view.getUint32(this._index - 4);
      }

      this._hasError = true;

      return 0;
    }
  }, {
    key: "readFloat32",
    value: function readFloat32() {
      this._index += 4;

      if (this._index <= this.view.byteLength) {
        return this.view.getFloat32(this._index - 4);
      }

      this._hasError = true;

      return 0;
    }
  }, {
    key: "readFloat64",
    value: function readFloat64() {
      this._index += 8;

      if (this._index <= this.view.byteLength) {
        return this.view.getFloat64(this._index - 8);
      }

      this._hasError = true;

      return 0;
    }
  }, {
    key: "readString",
    value: function readString() {
      var result = "";
      var charCode = void 0;

      if (this.hasNext()) {
        while (this.hasNext() && (charCode = this.readUInt8()) !== 0x00) {
          result += String.fromCharCode(charCode);
        }
        this._align();
      } else {
        this._hasError = true;
      }

      return result;
    }
  }, {
    key: "readBlob",
    value: function readBlob() {
      var length = this.readUInt32();
      var buffer = this.read(length);

      this._align();

      return buffer;
    }
  }, {
    key: "readAddress",
    value: function readAddress() {
      if (this._index < this.view.byteLength) {
        if (this.view.getUint8(this._index) == 0) {
          return this.readUInt32();
        }
      }
      return this.readString();
    }
  }, {
    key: "readTimeTag",
    value: function readTimeTag() {
      return [this.readUInt32(), this.readUInt32()];
    }
  }, {
    key: "hasError",
    value: function hasError() {
      return this._hasError;
    }
  }, {
    key: "hasNext",
    value: function hasNext() {
      return this._index < this.view.byteLength;
    }
  }, {
    key: "_align",
    value: function _align() {
      while (this.hasNext() && this._index % 4 !== 0) {
        this._index += 1;
      }
    }
  }]);

  return Reader;
}();

module.exports = Reader;