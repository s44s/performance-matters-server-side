"use strict";

var utils = require("./utils");

var types = {};
var tags = {};

[{
  type: "integer",
  tag: "i",
  size: function size() {
    return 4;
  },
  validate: utils.isInteger,
  valueOf: function valueOf(value) {
    return +value | 0;
  },
  write: function write(writer, value) {
    writer.writeInt32(value);
  },

  read: function read(reader) {
    return reader.readInt32();
  }
}, {
  type: "float",
  tag: "f",
  size: function size() {
    return 4;
  },
  validate: utils.isFloat,
  valueOf: function valueOf(value) {
    return +value || 0;
  },
  write: function write(writer, value) {
    writer.writeFloat32(value);
  },

  read: function read(reader) {
    return reader.readFloat32();
  }
}, {
  type: "string",
  tag: "s",
  size: function size(value) {
    return utils.size4(value.length + 1);
  },
  validate: utils.isString,
  valueOf: function valueOf(value) {
    return "" + value;
  },
  write: function write(writer, value) {
    writer.writeString(value);
  },

  read: function read(reader) {
    return reader.readString();
  }
}, {
  type: "blob",
  tag: "b",
  size: function size(value) {
    return 4 + utils.size4(value.byteLength || value.length);
  },
  validate: utils.isBlob,
  valueOf: function valueOf(value) {
    return utils.toBlob(value);
  },
  write: function write(writer, value) {
    writer.writeBlob(value);
  },

  read: function read(reader) {
    return reader.readBlob();
  }
}, {
  type: "timetag",
  tag: "t",
  size: function size() {
    return 8;
  },
  validate: utils.isTimeTag,
  valueOf: utils.toTimeTag,
  write: function write(writer, value) {
    writer.writeTimeTag(value);
  },

  read: function read(reader) {
    return reader.readTimeTag();
  }
}, {
  type: "double",
  tag: "d",
  size: function size() {
    return 8;
  },
  validate: utils.isDouble,
  valueOf: function valueOf(value) {
    return +value || 0;
  },
  write: function write(writer, value) {
    writer.writeFloat64(value);
  },

  read: function read(reader) {
    return reader.readFloat64();
  }
}, {
  type: "true",
  tag: "T",
  size: function size() {
    return 0;
  },
  validate: function validate(value) {
    return value === true;
  },
  valueOf: function valueOf() {
    return true;
  },
  write: function write() {},
  read: function read() {
    return true;
  }
}, {
  type: "false",
  tag: "F",
  size: function size() {
    return 0;
  },
  validate: function validate(value) {
    return value === false;
  },
  valueOf: function valueOf() {
    return false;
  },
  write: function write() {},
  read: function read() {
    return false;
  }
}, {
  type: "null",
  tag: "N",
  size: function size() {
    return 0;
  },
  validate: function validate(value) {
    return value === null;
  },
  valueOf: function valueOf() {
    return null;
  },
  write: function write() {},
  read: function read() {
    return null;
  }
}, {
  type: "bang",
  tag: "I",
  size: function size() {
    return 0;
  },
  validate: function validate(value) {
    return value === "bang";
  },
  valueOf: function valueOf() {
    return "bang";
  },
  write: function write() {},
  read: function read() {
    return "bang";
  }
}].forEach(function (params) {
  types[params.type] = params;
  tags[params.tag] = params;
});

module.exports = { types: types, tags: tags };