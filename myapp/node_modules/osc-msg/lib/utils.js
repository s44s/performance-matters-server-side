"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var DataView2 = require("dataview2").DataView2;
var Buffer2 = require("dataview2").Buffer2;

function size4(num) {
  return Math.ceil((num | 0) / 4) << 2;
}

function isNone(value) {
  return typeof value === "undefined" || value === null;
}

function isInteger(value) {
  return Math.floor(value) === value && value % 1 === 0;
}

function isFloat(value) {
  return !isNaN(value) && typeof value === "number";
}

function isDouble(value) {
  return !isNaN(value) && typeof value === "number";
}

function isTimeTag(value) {
  if (Array.isArray(value)) {
    return value.length === 2 && isInteger(value[0]) && isInteger(value[1]);
  }
  if (value instanceof Date) {
    return true;
  }
  return typeof value === "number" && value >= 0 && value % 1 === 0;
}

function isString(value) {
  return typeof value === "string";
}

function isBlob(value) {
  return value instanceof ArrayBuffer || value instanceof global.Buffer;
}

function toString(value) {
  if (isNone(value)) {
    return "";
  }
  return "" + value;
}

function toArray(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (isNone(value)) {
    return [];
  }
  return [value];
}

function toBlob(value) {
  if (isBlob(value)) {
    return value;
  }

  if (Array.isArray(value)) {
    var view = new DataView2(new Buffer2(value.length));

    for (var i = 0; i < value.length; i++) {
      view.setUint8(i, value[i]);
    }

    return view.buffer;
  }

  if (typeof value === "string") {
    var _view = new DataView2(new Buffer2(value.length));

    for (var _i = 0; _i < value.length; _i++) {
      _view.setUint8(_i, value.charCodeAt(_i));
    }

    return _view.buffer;
  }

  if (typeof value === "number") {
    return new Buffer2(+value | 0);
  }

  return new Buffer2(0);
}

function toAddress(value) {
  if (typeof value === "number") {
    return value >>> 0;
  }
  return toString(value);
}

function toTimeTag(value) {
  if (Array.isArray(value)) {
    return toTimeTagFromArray(value);
  }
  if (value instanceof Date) {
    return toTimeTagFromDate(value);
  }
  return toTimeTagFromNumber(value);
}

function toTimeTagFromArray(_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      hi = _ref2[0],
      lo = _ref2[1];

  hi >>>= 0;
  lo >>>= 0;

  return [hi, lo];
}

function toTimeTagFromDate(value) {
  var time = value / 1000 + 2208988800;
  var hi = time >>> 0;
  var lo = (time - hi) * 4294967296 >>> 0;

  return [hi, lo];
}

function toTimeTagFromNumber(value) {
  var hi = value / 4294967296 >>> 0;
  var lo = value % 4294967296 >>> 0;

  return [hi, lo];
}

module.exports = {
  size4: size4, isNone: isNone, isInteger: isInteger, isFloat: isFloat, isDouble: isDouble, isTimeTag: isTimeTag, isString: isString, isBlob: isBlob, toString: toString, toArray: toArray, toBlob: toBlob, toAddress: toAddress, toTimeTag: toTimeTag
};