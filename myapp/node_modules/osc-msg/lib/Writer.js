"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DataView2 = require("dataview2").DataView2;

var Writer = function () {
  function Writer(buffer) {
    _classCallCheck(this, Writer);

    this.view = new DataView2(buffer);

    this._index = 0;
    this._hasError = false;
  }

  _createClass(Writer, [{
    key: "writeUInt8",
    value: function writeUInt8(value) {
      this._index += 1;

      if (this._index <= this.view.byteLength) {
        this.view.setUint8(this._index - 1, value);
      } else {
        this._hasError = true;
      }
    }
  }, {
    key: "writeInt32",
    value: function writeInt32(value) {
      this._index += 4;

      if (this._index <= this.view.byteLength) {
        this.view.setInt32(this._index - 4, value);
      } else {
        this._hasError = true;
      }
    }
  }, {
    key: "writeUInt32",
    value: function writeUInt32(value) {
      this._index += 4;

      if (this._index <= this.view.byteLength) {
        this.view.setUint32(this._index - 4, value);
      } else {
        this._hasError = true;
      }
    }
  }, {
    key: "writeFloat32",
    value: function writeFloat32(value) {
      this._index += 4;

      if (this._index <= this.view.byteLength) {
        this.view.setFloat32(this._index - 4, value);
      } else {
        this._hasError = true;
      }
    }
  }, {
    key: "writeFloat64",
    value: function writeFloat64(value) {
      this._index += 8;

      if (this._index <= this.view.byteLength) {
        this.view.setFloat64(this._index - 8, value);
      } else {
        this._hasError = true;
      }
    }
  }, {
    key: "writeString",
    value: function writeString(value) {
      for (var i = 0; i < value.length; i++) {
        this.writeUInt8(value.charCodeAt(i));
      }

      this.writeUInt8(0);
      this._align();
    }
  }, {
    key: "writeBlob",
    value: function writeBlob(value) {
      var view = new DataView2(value);
      var length = view.byteLength;

      this.writeUInt32(length);

      for (var i = 0; i < length; i++) {
        this.writeUInt8(view.getUint8(i));
      }

      this._align();
    }
  }, {
    key: "writeAddress",
    value: function writeAddress(value) {
      if (typeof value === "number") {
        this.writeUInt32(value);
      } else {
        this.writeString("" + value);
      }
    }
  }, {
    key: "writeTimeTag",
    value: function writeTimeTag(_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          hi = _ref2[0],
          lo = _ref2[1];

      this.writeUInt32(hi);
      this.writeUInt32(lo);
    }
  }, {
    key: "writeRawData",
    value: function writeRawData(buffer, length) {
      if (this._index + length <= this.view.byteLength) {
        for (var i = 0; i < length; i++) {
          this.view.setUint8(this._index++, buffer[i]);
        }
      } else {
        this._hasError = true;
      }
    }
  }, {
    key: "hasError",
    value: function hasError() {
      return this._hasError;
    }
  }, {
    key: "hasNext",
    value: function hasNext() {
      return this._index < this.view.byteLength;
    }
  }, {
    key: "_align",
    value: function _align() {
      while (this._index % 4 !== 0) {
        this.writeUInt8(0x00);
      }
    }
  }]);

  return Writer;
}();

module.exports = Writer;